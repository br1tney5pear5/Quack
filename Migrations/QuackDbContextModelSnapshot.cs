// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quack.Models;

namespace Quack.Migrations
{
    [DbContext(typeof(QuackDbContext))]
    partial class QuackDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Quack.Models.BotModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("maxWords");

                    b.Property<int>("minWords");

                    b.Property<float>("postProbability");

                    b.Property<string>("seed");

                    b.Property<int?>("userID");

                    b.HasKey("ID");

                    b.ToTable("Bot");
                });

            modelBuilder.Entity("Quack.Models.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("authorID");

                    b.Property<DateTime>("datePublished");

                    b.Property<int>("postID");

                    b.Property<string>("text");

                    b.HasKey("ID");

                    b.HasIndex("authorID");

                    b.HasIndex("postID");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Quack.Models.Following", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("followedID");

                    b.Property<int>("followerID");

                    b.HasKey("ID");

                    b.HasIndex("followedID");

                    b.HasIndex("followerID");

                    b.ToTable("Following");
                });

            modelBuilder.Entity("Quack.Models.Post", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("authorID");

                    b.Property<int>("contentID");

                    b.Property<DateTime>("datePublished");

                    b.HasKey("ID");

                    b.HasIndex("authorID");

                    b.HasIndex("contentID");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Quack.Models.PostContent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("text");

                    b.HasKey("ID");

                    b.ToTable("PostContent");
                });

            modelBuilder.Entity("Quack.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Quack.Models.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("PostContentID");

                    b.Property<string>("name");

                    b.HasKey("ID");

                    b.HasIndex("PostContentID");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Quack.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("avatarUrl");

                    b.Property<bool>("deletable");

                    b.Property<string>("firstName");

                    b.Property<string>("lastName");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Quack.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Quack.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Quack.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Quack.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Quack.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Quack.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Quack.Models.Comment", b =>
                {
                    b.HasOne("Quack.Models.User", "author")
                        .WithMany()
                        .HasForeignKey("authorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Quack.Models.Post", "post")
                        .WithMany("comments")
                        .HasForeignKey("postID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Quack.Models.Following", b =>
                {
                    b.HasOne("Quack.Models.User", "followed")
                        .WithMany()
                        .HasForeignKey("followedID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Quack.Models.User", "follower")
                        .WithMany()
                        .HasForeignKey("followerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Quack.Models.Post", b =>
                {
                    b.HasOne("Quack.Models.User", "author")
                        .WithMany()
                        .HasForeignKey("authorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Quack.Models.PostContent", "content")
                        .WithMany()
                        .HasForeignKey("contentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Quack.Models.Tag", b =>
                {
                    b.HasOne("Quack.Models.PostContent")
                        .WithMany("tags")
                        .HasForeignKey("PostContentID");
                });
#pragma warning restore 612, 618
        }
    }
}
